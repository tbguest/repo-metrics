import { gql } from "@apollo/client";
import Head from "next/head";
import { useState } from "react";
import { getApolloClient } from "../apollo-client";
import { CardGrid } from "../components/CardGrid";
import { AllRepos } from "../models";
import styles from "../styles/Home.module.css";
import { AddRepoForm } from "../components/AddRepoForm";
import { useRouter } from "next/router";
import clientPromise from "../lib/mongodb";

const repositories = [
  {
    owner: "ethereum",
    repo: "go-ethereum",
    node_id: "MDEwOlJlcG9zaXRvcnkxNTQ1MjkxOQ==",
  },
  {
    owner: "paritytech",
    repo: "polkadot",
    node_id: "MDEwOlJlcG9zaXRvcnkxNDQxNDAzNDI=",
  },
  {
    owner: "ava-labs",
    repo: "avalanchego",
    node_id: "MDEwOlJlcG9zaXRvcnkyNDYzODc2NDQ=",
  },
  {
    owner: "cosmos",
    repo: "ibc-go",
    node_id: "MDEwOlJlcG9zaXRvcnkzMzc3NjQ1OTQ=",
  },
  {
    owner: "solana-labs",
    repo: "solana",
    node_id: "MDEwOlJlcG9zaXRvcnkxMjE0NzAzODM=",
  },
];

const Home = ({ nodes }: AllRepos) => {
  const [repoList, setRepoList] = useState(repositories);
  const openList = repositories.map(() => false);
  const [open, setOpen] = useState(openList);

  const router = useRouter();
  // Call this to refresh serverside props
  const refreshData = () => {
    router.replace(router.asPath);
  };

  // toggle the plot state boolean by index
  const handlePlotClick = (i: number) => {
    const list = [...open];
    list[i] = !list[i];
    setOpen(list);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <>
          <h1>GitHub projects by development effort</h1>
          <p>
            Disclaimer: The merit of a project cannot be judged solely on the
            metrics shown here. Use your judgement.
          </p>
          <AddRepoForm repoList={repoList} setRepoList={setRepoList} />
          <CardGrid repos={nodes} open={open} onClick={handlePlotClick} />
        </>
      </main>
    </div>
  );
};

export default Home;

export async function getServerSideProps() {
  const client = getApolloClient();

  const dbClient = await clientPromise;
  const db = dbClient.db(process.env.MONGODB_DB);
  const repos = await db
    .collection("repositories")
    .find({})
    .limit(20)
    .toArray();

  const ids = repos.map((item) => item.node_id);

  const { data } = await client.query<AllRepos>({
    query: gql`
      query InputRepos($id: [ID!]!) {
        nodes(ids: $id) {
          ... on Repository {
            id
            description
            forkCount
            name
            nameWithOwner
            stargazerCount
            issues {
              totalCount
            }
            mentionableUsers {
              totalCount
            }
            assignableUsers {
              totalCount
            }
            openIssues: issues(states: OPEN) {
              totalCount
            }
            pullRequests(states: OPEN) {
              totalCount
            }
          }
        }
      }
    `,
    variables: {
      id: ids,
    },
  });

  const nodes = data.nodes;

  return {
    props: {
      nodes,
    },
  };
}
