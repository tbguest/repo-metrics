import Head from "next/head";
import { useState, useEffect, useMemo } from "react";
import { AddRepoForm } from "../components/AddRepoForm";
import { CardGrid } from "../components/CardGrid";
import clientPromise from "../lib/mongodb";
import styles from "../styles/Home.module.css";
import { GetServerSideProps } from "next";
import { InferGetServerSidePropsType } from "next";

const Home = ({
  repos,
}: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  const [repoList, setRepoList] = useState(repos);
  const openList = repos.map(() => false);
  const [open, setOpen] = useState(openList);
  const [repoData, setRepoData] = useState("loading");
  // const [repoData, setRepoData] = useState([]);
  const [loading, setLoading] = useState("idle");

  // memoize the  id list to prevent infinite looping below
  const ids = useMemo(
    () => repoList.map((item: any) => item.node_id),
    [repoList]
  );

  // use the ids read from the DB to request data via gql api
  // pass ids to the api using a POST request
  useEffect(() => {
    const fetchAndSubmitData = async () => {
      setLoading("loading");
      const response = await fetch("/api/gql-repositories", {
        method: "POST",
        body: JSON.stringify({ ids }),
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        // setRepoData("error");
        setLoading("error");
        throw new Error(`Error: ${response.status}`);
      }
      const { data } = await response.json();
      setRepoData(data.nodes);
      setLoading("idle");
    };

    fetchAndSubmitData();
  }, [ids]);

  // toggle the plot state boolean by index
  const handlePlotClick = (i: number) => {
    const list = [...open];
    list[i] = !list[i];
    setOpen(list);
  };

  // toggle the plot state boolean by index
  const handleDelete = async (id: String) => {
    const updatedList = repoList.filter((item: any) => {
      return item.node_id != id;
    });
    setRepoList(updatedList);

    const response = await fetch(`/api/repositories?id=${id}`, {
      method: "DELETE",
    });

    if (!response.ok) {
      throw new Error(`Error: ${response.status}`);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <>
          <h1>GitHub projects by development effort</h1>
          <p>
            Disclaimer: The merit of a project cannot be judged solely on the
            metrics shown here. Use your judgement.
          </p>
          <AddRepoForm repoList={repoList} setRepoList={setRepoList} />
          <CardGrid
            repoData={repoData}
            loading={loading}
            open={open}
            onClick={handlePlotClick}
            onClose={handleDelete}
          />
        </>
      </main>
    </div>
  );
};

export default Home;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const dbClient = await clientPromise;
  const db = dbClient.db(process.env.MONGODB_DB);
  const response = await db
    .collection("repositories")
    .find({})
    .limit(20)
    .toArray();

  const repos = JSON.parse(JSON.stringify(response));

  return {
    props: {
      repos,
    },
  };
};
